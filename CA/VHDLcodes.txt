--AND Gate
-- Import std_logic library 

Library IEEE;
use IEEE.std_logic_1164.all;

--Entity
Entity ANDGATE is
port(A:in std_logic;
B:in std_logic;
Y:out std_logic
);
end ANDGATE;

--Architecture
Architecture RTL of ANDGATE is
begin
Y <= A AND B;
end RTL;


--Full adder

Library IEEE;
use IEEE.std_logic_1164.all;

ENTITY Fadder IS  
  PORT (
    A : IN  STD_LOGIC;
    B : IN  STD_LOGIC;
    Cin: IN  STD_LOGIC;
    Cout,sum: OUT STD_LOGIC
  );
END ENTITY Fadder;

ARCHITECTURE FULL OF Fadder IS

BEGIN
  sum <= A xor B xor Cin;
  Cout <= (A and B) or (A and Cin) or (B and Cin);
END FULL;

--4 bit adder
-- Import std_logic library 

Library IEEE;
use IEEE.std_logic_1164.all;

entity adder4 is
port(
  A, B:in STD_LOGIC_VECTOR(3 downto 0);
  Ci:in STD_LOGIC;  
  s:out STD_LOGIC_VECTOR(3 downto 0);
  Co: out STD_LOGIC);
end adder4;

architecture FA4 of adder4 is
  component Fadder  
  port(
    A, B, Cin: IN  STD_LOGIC;
    Cout,sum: OUT STD_LOGIC);
  end component;
  signal C:std_logic_vector(3 downto 1);
begin
  FA0: Fadder port map(A(0), B(0), Ci, C(1), s(0));  
  FA1: Fadder port map(A(1), B(1), C(1), C(2), s(1));
  FA2: Fadder port map(A(2), B(2), C(2), C(3), s(2));
  FA3: Fadder port map(A(3), B(3), C(3), Co, s(3));
end FA4;

--4 bit subtractor
Library IEEE;
use IEEE.std_logic_1164.all;

entity sub4 is
port(
  A, B:in STD_LOGIC_VECTOR(3 downto 0);
  Ci:in STD_LOGIC;  
  s:out STD_LOGIC_VECTOR(3 downto 0);
  Co: out STD_LOGIC);
end sub4;

architecture FA4 of sub4 is
  component Fadder  
  port(
    A, B, Cin: IN  STD_LOGIC;
    Cout,sum: OUT STD_LOGIC);
  end component;
  signal C:std_logic_vector(3 downto 1);
	signal D:std_logic_vector(3 downto 0);
begin
D <= not(B);
  FA0: Fadder port map(A(0), D(0), '1', C(1), s(0));  
  FA1: Fadder port map(A(1), D(1), C(1), C(2), s(1));
  FA2: Fadder port map(A(2), D(2), C(2), C(3), s(2));
  FA3: Fadder port map(A(3), D(3), C(3), Co, s(3));
end FA4;